// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: go/asr.proto

package asr

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ASRClient is the client API for ASR service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ASRClient interface {
	ASR(ctx context.Context, in *AsrRequest, opts ...grpc.CallOption) (*AsrResponse, error)
}

type aSRClient struct {
	cc grpc.ClientConnInterface
}

func NewASRClient(cc grpc.ClientConnInterface) ASRClient {
	return &aSRClient{cc}
}

func (c *aSRClient) ASR(ctx context.Context, in *AsrRequest, opts ...grpc.CallOption) (*AsrResponse, error) {
	out := new(AsrResponse)
	err := c.cc.Invoke(ctx, "/ASR/ASR", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ASRServer is the server API for ASR service.
// All implementations must embed UnimplementedASRServer
// for forward compatibility
type ASRServer interface {
	ASR(context.Context, *AsrRequest) (*AsrResponse, error)
	mustEmbedUnimplementedASRServer()
}

// UnimplementedASRServer must be embedded to have forward compatible implementations.
type UnimplementedASRServer struct {
}

func (UnimplementedASRServer) ASR(context.Context, *AsrRequest) (*AsrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ASR not implemented")
}
func (UnimplementedASRServer) mustEmbedUnimplementedASRServer() {}

// UnsafeASRServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ASRServer will
// result in compilation errors.
type UnsafeASRServer interface {
	mustEmbedUnimplementedASRServer()
}

func RegisterASRServer(s grpc.ServiceRegistrar, srv ASRServer) {
	s.RegisterService(&ASR_ServiceDesc, srv)
}

func _ASR_ASR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AsrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ASRServer).ASR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ASR/ASR",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ASRServer).ASR(ctx, req.(*AsrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ASR_ServiceDesc is the grpc.ServiceDesc for ASR service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ASR_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ASR",
	HandlerType: (*ASRServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ASR",
			Handler:    _ASR_ASR_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go/asr.proto",
}
